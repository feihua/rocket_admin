// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// date：2024/12/19 10:36:44

use rocket::State;
use sea_orm::ActiveValue::Set;
use sea_orm::{
    ColumnTrait, DatabaseConnection, EntityTrait, NotSet, PaginatorTrait, QueryFilter, QueryOrder,
};

use crate::common::error_handler::ErrorResponder;
use crate::common::result::BaseResponse;
use crate::middleware::auth::Token;
use crate::model::system::prelude::SysMenu;
use crate::model::system::sys_menu;
use crate::vo::system::sys_menu_vo::*;
use rocket::serde::json::{Json, Value};
use sea_orm::prelude::Expr;

/*
 *添加菜单信息
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/addMenu", data = "<item>")]
pub async fn add_sys_menu(
    db: &State<DatabaseConnection>,
    item: Json<AddMenuReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("add sys_menu params: {:?}", &item);
    let db = db as &DatabaseConnection;

    let req = item.0;

    let sys_menu = sys_menu::ActiveModel {
        id: NotSet,                    //主键
        menu_name: Set(req.menu_name), //菜单名称
        menu_type: Set(req.menu_type), //菜单类型(1：目录   2：菜单   3：按钮)
        status_id: Set(req.status_id), //状态(1:正常，0:禁用)
        sort: Set(req.sort),           //排序
        parent_id: Set(req.parent_id), //父ID
        menu_url: Set(req.menu_url),   //路由路径
        api_url: Set(req.api_url),     //接口URL
        menu_icon: Set(req.menu_icon), //菜单图标
        remark: Set(req.remark),       //备注
        create_time: NotSet,           //创建时间
        update_time: NotSet,           //修改时间
    };

    let result = SysMenu::insert(sys_menu).exec(db).await;

    match result {
        Ok(_u) => Ok(BaseResponse::<String>::ok_result()),
        Err(err) => Ok(BaseResponse::<String>::err_result_msg(err.to_string())),
    }
}

/*
 *删除菜单信息
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/deleteMenu", data = "<item>")]
pub async fn delete_sys_menu(
    db: &State<DatabaseConnection>,
    item: Json<DeleteMenuReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("delete sys_menu params: {:?}", &item);
    let db = db as &DatabaseConnection;
    let req = item.0;

    if SysMenu::find_by_id(req.id.clone()).one(db).await?.is_none() {
        return Ok(BaseResponse::<String>::err_result_msg(
            "菜单不存在,不能删除!".to_string(),
        ));
    }

    if SysMenu::find()
        .filter(sys_menu::Column::ParentId.eq(req.id.clone()))
        .count(db)
        .await?
        > 0
    {
        return Ok(BaseResponse::<String>::err_result_msg(
            "有下级菜单,不能直接删除!".to_string(),
        ));
    }

    let result = SysMenu::delete_many()
        .filter(sys_menu::Column::Id.eq(req.id))
        .exec(db)
        .await;

    match result {
        Ok(_u) => Ok(BaseResponse::<String>::ok_result()),
        Err(err) => Ok(BaseResponse::<String>::err_result_msg(err.to_string())),
    }
}

/*
 *更新菜单信息
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/updateMenu", data = "<item>")]
pub async fn update_sys_menu(
    db: &State<DatabaseConnection>,
    item: Json<UpdateMenuReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("update sys_menu params: {:?}", &item);
    let db = db as &DatabaseConnection;
    let req = item.0;

    if SysMenu::find_by_id(req.id.clone()).one(db).await?.is_none() {
        return Ok(BaseResponse::<String>::err_result_msg(
            "菜单信息不存在,不能更新!".to_string(),
        ));
    }

    let sys_menu = sys_menu::ActiveModel {
        id: Set(req.id),               //主键
        menu_name: Set(req.menu_name), //菜单名称
        menu_type: Set(req.menu_type), //菜单类型(1：目录   2：菜单   3：按钮)
        status_id: Set(req.status_id), //状态(1:正常，0:禁用)
        sort: Set(req.sort),           //排序
        parent_id: Set(req.parent_id), //父ID
        menu_url: Set(req.menu_url),   //路由路径
        api_url: Set(req.api_url),     //接口URL
        menu_icon: Set(req.menu_icon), //菜单图标
        remark: Set(req.remark),       //备注
        create_time: NotSet,           //创建时间
        update_time: NotSet,           //修改时间
    };

    let result = SysMenu::update(sys_menu).exec(db).await;
    match result {
        Ok(_u) => Ok(BaseResponse::<String>::ok_result()),
        Err(err) => Ok(BaseResponse::<String>::err_result_msg(err.to_string())),
    }
}

/*
 *更新菜单信息状态
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/updateMenuStatus", data = "<item>")]
pub async fn update_sys_menu_status(
    db: &State<DatabaseConnection>,
    item: Json<UpdateMenuStatusReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("update sys_menu_status params: {:?}", &item);
    let db = db as &DatabaseConnection;
    let req = item.0;

    let result = SysMenu::update_many()
        .col_expr(sys_menu::Column::StatusId, Expr::value(req.status))
        .filter(sys_menu::Column::Id.is_in(req.ids))
        .exec(db)
        .await;
    match result {
        Ok(_u) => Ok(BaseResponse::<String>::ok_result()),
        Err(err) => Ok(BaseResponse::<String>::err_result_msg(err.to_string())),
    }
}

/*
 *查询菜单信息详情
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/queryMenuDetail", data = "<item>")]
pub async fn query_sys_menu_detail(
    db: &State<DatabaseConnection>,
    item: Json<QueryMenuDetailReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("query sys_menu_detail params: {:?}", &item);
    let db = db as &DatabaseConnection;

    let result = SysMenu::find_by_id(item.id.clone()).one(db).await;

    match result {
        Ok(d) => {
            let x = d.unwrap();

            let sys_menu = QueryMenuDetailResp {
                id: x.id,                                   //主键
                menu_name: x.menu_name,                     //菜单名称
                menu_type: x.menu_type,                     //菜单类型(1：目录   2：菜单   3：按钮)
                status_id: x.status_id,                     //状态(1:正常，0:禁用)
                sort: x.sort,                               //排序
                parent_id: x.parent_id,                     //父ID
                menu_url: x.menu_url.unwrap_or_default(),   //路由路径
                api_url: x.api_url.unwrap_or_default(),     //接口URL
                menu_icon: x.menu_icon.unwrap_or_default(), //菜单图标
                remark: x.remark.unwrap_or_default(),       //备注
                create_time: x.create_time.to_string(),     //创建时间
                update_time: x.update_time.to_string(),     //修改时间
            };

            Ok(BaseResponse::<QueryMenuDetailResp>::ok_result_data(
                sys_menu,
            ))
        }
        Err(err) => Ok(BaseResponse::<String>::err_result_msg(err.to_string())),
    }
}

/*
 *查询菜单信息列表
 *author：刘飞华
 *date：2024/12/19 10:36:44
 */
#[post("/queryMenuList", data = "<item>")]
pub async fn query_sys_menu_list(
    db: &State<DatabaseConnection>,
    item: Json<QueryMenuListReq>,
    _auth: Token,
) -> Result<Value, ErrorResponder> {
    log::info!("query sys_menu_list params: {:?}", &item);
    let db = db as &DatabaseConnection;

    let mut sys_menu_list_data: Vec<MenuListDataResp> = Vec::new();

    for x in SysMenu::find()
        .order_by_asc(sys_menu::Column::Sort)
        .all(db)
        .await?
    {
        sys_menu_list_data.push(MenuListDataResp {
            id: x.id,                                   //主键
            menu_name: x.menu_name,                     //菜单名称
            menu_type: x.menu_type,                     //菜单类型(1：目录   2：菜单   3：按钮)
            status_id: x.status_id,                     //状态(1:正常，0:禁用)
            sort: x.sort,                               //排序
            parent_id: x.parent_id,                     //父ID
            menu_url: x.menu_url.unwrap_or_default(),   //路由路径
            api_url: x.api_url.unwrap_or_default(),     //接口URL
            menu_icon: x.menu_icon.unwrap_or_default(), //菜单图标
            remark: x.remark.unwrap_or_default(),       //备注
            create_time: x.create_time.to_string(),     //创建时间
            update_time: x.update_time.to_string(),     //修改时间
        })
    }

    Ok(BaseResponse::<Vec<MenuListDataResp>>::ok_result_page(
        sys_menu_list_data,
        0,
    ))
}
